// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Activation/> component rendering matches snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Activation
    addAccount={[Function]}
    authentication={
        Object {
            "accountName": "test",
            "adAccountId": "1",
            "expireIn": "Expired",
          }
    }
    disabled={false}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "accountName": "test",
      "addAccount": [Function],
      "className": undefined,
      "contactEmails": Array [],
      "disabled": false,
      "icon": null,
      "message": "Renew",
      "platform": "",
      "quiet": true,
      "title": "Renew Account",
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "accountName": "test",
        "addAccount": [Function],
        "className": undefined,
        "contactEmails": Array [],
        "disabled": false,
        "icon": null,
        "message": "Renew",
        "platform": "",
        "quiet": true,
        "title": "Renew Account",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

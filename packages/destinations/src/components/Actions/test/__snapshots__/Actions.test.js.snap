// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Actions/> component rendering matches snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Actions
    destination={
        Object {
            "id": 20008,
            "name": "card",
          }
    }
    disabled={false}
    showMetrics={false}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <EditAction
          destination={
                    Object {
                              "id": 20008,
                              "name": "card",
                            }
          }
          disabled={false}
          editDestination={[Function]}
/>,
        <DeleteAction
          deleteDestination={[Function]}
          destination={
                    Object {
                              "id": 20008,
                              "name": "card",
                            }
          }
          disabled={false}
/>,
        false,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "destination": Object {
            "id": 20008,
            "name": "card",
          },
          "disabled": false,
          "editDestination": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "deleteDestination": [Function],
          "destination": Object {
            "id": 20008,
            "name": "card",
          },
          "disabled": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      false,
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <EditAction
            destination={
                        Object {
                                    "id": 20008,
                                    "name": "card",
                                  }
            }
            disabled={false}
            editDestination={[Function]}
/>,
          <DeleteAction
            deleteDestination={[Function]}
            destination={
                        Object {
                                    "id": 20008,
                                    "name": "card",
                                  }
            }
            disabled={false}
/>,
          false,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "destination": Object {
              "id": 20008,
              "name": "card",
            },
            "disabled": false,
            "editDestination": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "deleteDestination": [Function],
            "destination": Object {
              "id": 20008,
              "name": "card",
            },
            "disabled": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        false,
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

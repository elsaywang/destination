// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TraitsCreation /> component rendering when it is used in Multi-Signals Traits Creation matches the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TraitsCreation
    multiCreation={true}
    selectedSignals={
        Object {
            "hasSignalSelectionsTypeWarning": false,
            "records": Array [],
            "selectionMessage": "",
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "isMaxSignalSelectionsReached": undefined,
      "multiTraitCreationButtonText": "Create Trait From Selected Signal",
      "selectedSignals": Object {
        "hasSignalSelectionsTypeWarning": false,
        "records": Array [],
        "selectionMessage": "",
      },
      "storeSessionAndNavigateToTraits": [Function],
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "isMaxSignalSelectionsReached": undefined,
        "multiTraitCreationButtonText": "Create Trait From Selected Signal",
        "selectedSignals": Object {
          "hasSignalSelectionsTypeWarning": false,
          "records": Array [],
          "selectionMessage": "",
        },
        "storeSessionAndNavigateToTraits": [Function],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`<TraitsCreation /> component rendering when it is used in Single-Signal Traits Creation matches the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TraitsCreation
    canCreateTraits={true}
    keyValuePairs={Array []}
    signalType="ONBOARDED"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "canCreateTraits": true,
      "storeSessionAndNavigateToTraits": [Function],
      "traitsCreationLabelText": "Create Onboarded Trait",
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "canCreateTraits": true,
        "storeSessionAndNavigateToTraits": [Function],
        "traitsCreationLabelText": "Create Onboarded Trait",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<KeyValuePair /> component rendering matches snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <KeyValuePair
    enabled={false}
    onKeyChange={[Function]}
    onOperatorChange={[Function]}
    onValueChange={[Function]}
    pair={
        Object {
            "id": 0,
            "key": "",
            "operator": "==",
            "value": "",
          }
    }
    reportSuiteId="test"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Label
          labelFor="key0"
          style={
                    Object {
                              "position": "relative",
                            }
          }
          value="Key"
>
          <Autocomplete
                    allowCreate={false}
                    className="key-search"
                    getCompletions={[Function]}
                    onChange={[Function]}
                    value=""
          >
                    <Textfield
                              autoFocus={false}
                              className="textField"
                              data-test="key-search-field"
                              disabled={false}
                              id="key0"
                              invalid={false}
                              placeholder="Enter a key"
                              quiet={false}
                              readOnly={false}
                              required={false}
                    />
          </Autocomplete>
          <InlineErrorMessage
                    className="error"
                    errorMessage=""
                    isInvalid={false}
                    showIcon={false}
          />
</Label>,
        <Select
          className="operator operator"
          data-test="operator"
          onChange={[Function]}
          options={
                    Array [
                              Object {
                                "label": "==",
                                "value": "==",
                              },
                              Object {
                                "label": "!=",
                                "value": "!=",
                              },
                              Object {
                                "label": ">",
                                "value": ">",
                              },
                              Object {
                                "label": "<",
                                "value": "<",
                              },
                              Object {
                                "label": ">=",
                                "value": ">=",
                              },
                              Object {
                                "label": "<=",
                                "value": "<=",
                              },
                              Object {
                                "label": "contains",
                                "value": "contains",
                              },
                              Object {
                                "label": "starts with",
                                "value": "startswith",
                              },
                              Object {
                                "label": "ends with",
                                "value": "endswith",
                              },
                            ]
          }
          value="=="
/>,
        <Label
          labelFor="value0"
          style={
                    Object {
                              "position": "relative",
                            }
          }
          value="Value"
>
          <Textfield
                    autoFocus={false}
                    className="textField value-search"
                    data-test="value-search"
                    disabled={false}
                    id="value0"
                    invalid={false}
                    onChange={[Function]}
                    placeholder="Enter a value"
                    quiet={false}
                    readOnly={false}
                    required={false}
                    value=""
          />
          <InlineErrorMessage
                    className="error"
                    errorMessage="It can only be numerical values when it's > or <."
                    isInvalid={false}
                    showIcon={false}
          />
</Label>,
      ],
      "data-test": "key-value-pair",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Autocomplete
              allowCreate={false}
              className="key-search"
              getCompletions={[Function]}
              onChange={[Function]}
              value=""
>
              <Textfield
                            autoFocus={false}
                            className="textField"
                            data-test="key-search-field"
                            disabled={false}
                            id="key0"
                            invalid={false}
                            placeholder="Enter a key"
                            quiet={false}
                            readOnly={false}
                            required={false}
              />
</Autocomplete>,
            <InlineErrorMessage
              className="error"
              errorMessage=""
              isInvalid={false}
              showIcon={false}
/>,
          ],
          "labelFor": "key0",
          "style": Object {
            "position": "relative",
          },
          "value": "Key",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "allowCreate": false,
              "children": <Textfield
                autoFocus={false}
                className="textField"
                data-test="key-search-field"
                disabled={false}
                id="key0"
                invalid={false}
                placeholder="Enter a key"
                quiet={false}
                readOnly={false}
                required={false}
/>,
              "className": "key-search",
              "getCompletions": [Function],
              "onChange": [Function],
              "value": "",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "autoFocus": false,
                "className": "textField",
                "data-test": "key-search-field",
                "disabled": false,
                "id": "key0",
                "invalid": false,
                "placeholder": "Enter a key",
                "quiet": false,
                "readOnly": false,
                "required": false,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "error",
              "errorMessage": "",
              "isInvalid": false,
              "showIcon": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "className": "operator operator",
          "data-test": "operator",
          "onChange": [Function],
          "options": Array [
            Object {
              "label": "==",
              "value": "==",
            },
            Object {
              "label": "!=",
              "value": "!=",
            },
            Object {
              "label": ">",
              "value": ">",
            },
            Object {
              "label": "<",
              "value": "<",
            },
            Object {
              "label": ">=",
              "value": ">=",
            },
            Object {
              "label": "<=",
              "value": "<=",
            },
            Object {
              "label": "contains",
              "value": "contains",
            },
            Object {
              "label": "starts with",
              "value": "startswith",
            },
            Object {
              "label": "ends with",
              "value": "endswith",
            },
          ],
          "value": "==",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Textfield
              autoFocus={false}
              className="textField value-search"
              data-test="value-search"
              disabled={false}
              id="value0"
              invalid={false}
              onChange={[Function]}
              placeholder="Enter a value"
              quiet={false}
              readOnly={false}
              required={false}
              value=""
/>,
            <InlineErrorMessage
              className="error"
              errorMessage="It can only be numerical values when it's > or <."
              isInvalid={false}
              showIcon={false}
/>,
          ],
          "labelFor": "value0",
          "style": Object {
            "position": "relative",
          },
          "value": "Value",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "autoFocus": false,
              "className": "textField value-search",
              "data-test": "value-search",
              "disabled": false,
              "id": "value0",
              "invalid": false,
              "onChange": [Function],
              "placeholder": "Enter a value",
              "quiet": false,
              "readOnly": false,
              "required": false,
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "error",
              "errorMessage": "It can only be numerical values when it's > or <.",
              "isInvalid": false,
              "showIcon": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": "span",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Label
            labelFor="key0"
            style={
                        Object {
                                    "position": "relative",
                                  }
            }
            value="Key"
>
            <Autocomplete
                        allowCreate={false}
                        className="key-search"
                        getCompletions={[Function]}
                        onChange={[Function]}
                        value=""
            >
                        <Textfield
                                    autoFocus={false}
                                    className="textField"
                                    data-test="key-search-field"
                                    disabled={false}
                                    id="key0"
                                    invalid={false}
                                    placeholder="Enter a key"
                                    quiet={false}
                                    readOnly={false}
                                    required={false}
                        />
            </Autocomplete>
            <InlineErrorMessage
                        className="error"
                        errorMessage=""
                        isInvalid={false}
                        showIcon={false}
            />
</Label>,
          <Select
            className="operator operator"
            data-test="operator"
            onChange={[Function]}
            options={
                        Array [
                                    Object {
                                      "label": "==",
                                      "value": "==",
                                    },
                                    Object {
                                      "label": "!=",
                                      "value": "!=",
                                    },
                                    Object {
                                      "label": ">",
                                      "value": ">",
                                    },
                                    Object {
                                      "label": "<",
                                      "value": "<",
                                    },
                                    Object {
                                      "label": ">=",
                                      "value": ">=",
                                    },
                                    Object {
                                      "label": "<=",
                                      "value": "<=",
                                    },
                                    Object {
                                      "label": "contains",
                                      "value": "contains",
                                    },
                                    Object {
                                      "label": "starts with",
                                      "value": "startswith",
                                    },
                                    Object {
                                      "label": "ends with",
                                      "value": "endswith",
                                    },
                                  ]
            }
            value="=="
/>,
          <Label
            labelFor="value0"
            style={
                        Object {
                                    "position": "relative",
                                  }
            }
            value="Value"
>
            <Textfield
                        autoFocus={false}
                        className="textField value-search"
                        data-test="value-search"
                        disabled={false}
                        id="value0"
                        invalid={false}
                        onChange={[Function]}
                        placeholder="Enter a value"
                        quiet={false}
                        readOnly={false}
                        required={false}
                        value=""
            />
            <InlineErrorMessage
                        className="error"
                        errorMessage="It can only be numerical values when it's > or <."
                        isInvalid={false}
                        showIcon={false}
            />
</Label>,
        ],
        "data-test": "key-value-pair",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Autocomplete
                allowCreate={false}
                className="key-search"
                getCompletions={[Function]}
                onChange={[Function]}
                value=""
>
                <Textfield
                                autoFocus={false}
                                className="textField"
                                data-test="key-search-field"
                                disabled={false}
                                id="key0"
                                invalid={false}
                                placeholder="Enter a key"
                                quiet={false}
                                readOnly={false}
                                required={false}
                />
</Autocomplete>,
              <InlineErrorMessage
                className="error"
                errorMessage=""
                isInvalid={false}
                showIcon={false}
/>,
            ],
            "labelFor": "key0",
            "style": Object {
              "position": "relative",
            },
            "value": "Key",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "allowCreate": false,
                "children": <Textfield
                  autoFocus={false}
                  className="textField"
                  data-test="key-search-field"
                  disabled={false}
                  id="key0"
                  invalid={false}
                  placeholder="Enter a key"
                  quiet={false}
                  readOnly={false}
                  required={false}
/>,
                "className": "key-search",
                "getCompletions": [Function],
                "onChange": [Function],
                "value": "",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "autoFocus": false,
                  "className": "textField",
                  "data-test": "key-search-field",
                  "disabled": false,
                  "id": "key0",
                  "invalid": false,
                  "placeholder": "Enter a key",
                  "quiet": false,
                  "readOnly": false,
                  "required": false,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "error",
                "errorMessage": "",
                "isInvalid": false,
                "showIcon": false,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "className": "operator operator",
            "data-test": "operator",
            "onChange": [Function],
            "options": Array [
              Object {
                "label": "==",
                "value": "==",
              },
              Object {
                "label": "!=",
                "value": "!=",
              },
              Object {
                "label": ">",
                "value": ">",
              },
              Object {
                "label": "<",
                "value": "<",
              },
              Object {
                "label": ">=",
                "value": ">=",
              },
              Object {
                "label": "<=",
                "value": "<=",
              },
              Object {
                "label": "contains",
                "value": "contains",
              },
              Object {
                "label": "starts with",
                "value": "startswith",
              },
              Object {
                "label": "ends with",
                "value": "endswith",
              },
            ],
            "value": "==",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Textfield
                autoFocus={false}
                className="textField value-search"
                data-test="value-search"
                disabled={false}
                id="value0"
                invalid={false}
                onChange={[Function]}
                placeholder="Enter a value"
                quiet={false}
                readOnly={false}
                required={false}
                value=""
/>,
              <InlineErrorMessage
                className="error"
                errorMessage="It can only be numerical values when it's > or <."
                isInvalid={false}
                showIcon={false}
/>,
            ],
            "labelFor": "value0",
            "style": Object {
              "position": "relative",
            },
            "value": "Value",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "autoFocus": false,
                "className": "textField value-search",
                "data-test": "value-search",
                "disabled": false,
                "id": "value0",
                "invalid": false,
                "onChange": [Function],
                "placeholder": "Enter a value",
                "quiet": false,
                "readOnly": false,
                "required": false,
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "error",
                "errorMessage": "It can only be numerical values when it's > or <.",
                "isInvalid": false,
                "showIcon": false,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": "span",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
